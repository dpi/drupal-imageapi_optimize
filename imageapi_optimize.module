<?php
/**
 * @file
 * Image optimize functionalities
 */

/**
 * Implements hook_hook_info().
 */
function imageapi_optimize_hook_info() {
  $hooks = array();

  $hooks['imageapi_optimize_info'] = array(
    'group' => 'imageapi_optimize',
  );

  $hooks['imageapi_optimize_processors'] = array(
    'group' => 'imageapi_optimize',
  );

  return $hooks;
}

/**
 * Implements hook_theme().
 */
function imageapi_optimize_theme() {
  $items = array();

  $items['imageapi_optimize_services_internal_form'] = array(
    'render element' => 'form',
    'file' => 'services/internal.inc',
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function imageapi_optimize_menu() {

  $items['admin/config/media/imageapi-optimize'] = array(
    'title' => 'ImageAPI Optimize',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imageapi_optimize_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'imageapi_optimize.admin.inc',
  );

  $items['admin/config/media/imageapi-optimize/%'] = array(
    'title callback' => 'imageapi_optimize_internal_binary_settings_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imageapi_optimize_internal_binary_settings', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'services/internal.inc',
  );

  return $items;
}

/**
 * Implements image_HOOK_save().
 */
function image_imageapi_optimize_save(stdClass $image, $dst) {
  if (_imageapi_optimize_invoke('save', $image, array($dst))) {
    $return = _imageapi_optimize_optimize($image, $dst);
  }
  else {
    $return = FALSE;
  }

  // Remove our magic.
  $image->toolkit = $toolkit = isset($image->original_toolkit) ? $image->original_toolkit : variable_get('imageapi_optimize_toolkit', '');
  unset($image->original_toolkit);

  return $return;
}

/**
 * Helper. Based on image_toolkit_invoke().
 *
 * @see imageapi_optimize_optimize_effect
 */
function _imageapi_optimize_invoke($method, $image, array $params = array()) {
  $toolkit = isset($image->original_toolkit) ? $image->original_toolkit : variable_get('imageapi_optimize_toolkit', '');
  $function = 'image_' . $toolkit . '_' . $method;
  if (function_exists($function)) {
    array_unshift($params, $image);
    return call_user_func_array($function, $params);
  }
  return FALSE;
}

/**
 * Optimizes image with external commands
 */
function _imageapi_optimize_optimize($image, $dst) {
  $info = imageapi_optimize_info();
  $service = isset($image->imageapi_optimize['service']) ? $image->imageapi_optimize['service'] : variable_get('imageapi_optimize_service', 'internal');

  if (isset($info['services'][$service])) {
    $service = $info['services'][$service];
    if (isset($service['file'])) {
      include_once $service['file'];
    }

    $settings = isset($image->imageapi_optimize['settings']) ? $image->imageapi_optimize['settings'] : array();

    $service['callbacks']['process']($image, $dst, $settings);
  }

  // If optimize service fails, there is no problem. Original image is saved.
  return TRUE;
}

/**
 * Load all defined services and binaries info definitions.
 */
function imageapi_optimize_info($reset = FALSE) {
  $cache = cache_get('imageapi_optimize:info');

  if (!$cache || $reset) {
    $info = module_invoke_all('imageapi_optimize_info');
    drupal_alter('imageapi_optimize_info', $info);

    // Process and validate all defined info.
    foreach ($info as $type => &$types) {
      foreach ($types as $name => &$data) {
        // Set defaults.
        $data += array(
          'callbacks' => array(),
          'weight' => 0,
        );
        $data['callbacks'] += array(
          'process' => 'imageapi_optimize_' . $type . '_' . $name,
        );

        // Add form callback if undefined yet available.
        if (!isset($data['callbacks']['form'])) {
          $function = 'imageapi_optimize_' . $type . '_' . $name . '_form';
          if (function_exists($function)) {
            $data['callbacks']['form'] = $function;
          }
        }

        // Set user defined binaries weight if available.
        if ('binaries' == $type) {
          $settings = variable_get('imageapi_optimize_' . $name, array());
          $data['weight'] = isset($settings['weight']) ? $settings['weight'] : $data['weight'];

          if (empty($data['settings'])) {
            $data['settings'] = array();
          }
        }

        // Validate info.
        $error = '';
        if (!isset($data['title'])) {
          $error .= t('Title not set.') . '<br />';
        }

        foreach ($data['callbacks'] as $callback) {
          if (!function_exists($callback)) {
            $error .= t('Function !callback doesn\'t exist.', array('!callback' => $callback)) . '<br />';
          }
        }

        if (isset($data['file']) && !file_exists($data['file'])) {
          $error .= t('File !file doesn\'t exist.', array('!file' => $data['file'])) . '<br />';
        }

        if (!empty($error)) {
          unset($info[$type][$name]);
          watchdog('imageapi_optimize', $error);
        }
      }

      // Sort by weight.
      uasort($info[$type], 'drupal_sort_weight');
    }

    // Cache the info to reduce future load times.
    cache_set('imageapi_optimize:info', $info);
    return $info;
  }

  return $cache->data;
}

/**
 * Implements hook_image_effect_info().
 */
function imageapi_optimize_image_effect_info() {
  $effects = array();

  $effects['imageapi_optimize'] = array(
    'label' => t('ImageAPI Optimize'),
    'help' => t('This will optmize the image using the selected options, this should be the last effect in the preset'),
    'effect callback' => 'imageapi_optimize_optimize_effect',
    'form callback' => 'imageapi_optimize_optimize_effect_form',
    //'summary theme' => 'imageapi_optimize_optimize_effect_summary',
  );

  return $effects;
}

/**
 * Image effect callback for image optimize.
 *
 * We actually just change the image toolkit to 'imageapi_optimize' so that
 * when image_toolkit_invoke() is called by image_style_create_derivative()
 * our function image_imageapi_optimize_save() is called.
 */
function imageapi_optimize_optimize_effect(stdClass $image, $options) {
  $image->original_toolkit = $image->toolkit;
  $image->toolkit = 'imageapi_optimize';

  // Process the settings so that they're available later.
  if (isset($options['setting_source']) && $options['setting_source'] == 'style') {
    // Settings come from this image style.
  }
  else {
    // Settings come from the global settings.
    $image->imageapi_optimize['service'] = variable_get('imageapi_optimize_service', 'internal');
    $image->imageapi_optimize['settings'] = variable_get('imageapi_optimize_' . $image->imageapi_optimize['service'], array());
  }
}

function imageapi_optimize_optimize_effect_form($data) {
  $form = array();

  $form['setting_source'] = array(
    '#type' => 'radios',
    '#title' => t('Settings'),
    '#options' => array(
      'global' => t('Use global settings'),
      'style' => t('Style specific settings'),
    ),
    '#default_value' => isset($data['setting_source']) ? $data['setting_source'] : 'global',
  );



  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function imageapi_optimize_form_image_style_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'imageapi_optimize_form_image_style_validate';
  $form['effects']['new']['add']['#validate'][] = 'imageapi_optimize_form_image_style_validate';

  // We only allow our effect to be added to a style once.
  $style = $form_state['image_style'];
  foreach ($style['effects'] as $effect) {
    if ($effect['name'] == 'imageapi_optimize') {
      unset($form['effects']['new']['new']['#options']['imageapi_optimize']);
    }
  }
}

/**
 * Form validation function for image_style_form().
 *
 * We ensure that if our effect is present in the form it has the highest
 * weight.
 */
function imageapi_optimize_form_image_style_validate($form, &$form_state) {
  // Update the image style.
  $style = $form_state['image_style'];

  // Find the max of all the 'other' weights.
  $weights = array();
  $imageapi_optimize_effects_id = NULL;
  if (!empty($form_state['values']['effects'])) {
    foreach ($form_state['values']['effects'] as $ieid => $effect_data) {
      if (isset($style['effects'][$ieid])) {
        $effect = $style['effects'][$ieid];
        if ($effect['name'] == 'imageapi_optimize') {
          $imageapi_optimize_effects_id = $ieid;
        }
        else {
          $weights[] = $effect_data['weight'];
        }
      }
    }
  }

  // If the user is adding an effect, consider that too.
  if ($form_state['triggering_element']['#value'] == $form['effects']['new']['add']['#value']) {
    $weights[] = $form_state['values']['weight'];
  }

  if (isset($imageapi_optimize_effects_id) && !empty($weights)) {
    form_set_value($form['effects'][$imageapi_optimize_effects_id]['weight'], max($weights) + 1, $form_state);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function imageapi_optimize_ctools_plugin_type() {
  return array(
    'processors' => array(
      'use hooks' => TRUE,
    ),
  );
}

function imageapi_optimize_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

function imageapi_optimize_get_processor($id) {
  ctools_include('plugins');
  if ($class = ctools_plugin_load_class('imageapi_optimize', 'processors', $id, 'handler')) {
    return new $class();
  }
}

function example_ctools_export_ui_form(&$form, &$form_state) {
  $foo = 'f';
}

class ImageAPIOptimizePipeline {

}